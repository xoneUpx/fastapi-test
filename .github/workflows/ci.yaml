name: Terminus CI/CD

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

permissions:
  contents: read  # Minimal required permissions

jobs:
  generate-matrix:
    name: 🧮 Generate Nox Sessions Matrix
    runs-on: ubuntu-latest
    outputs:
      sessions: ${{ steps.set-matrix.outputs.sessions }}
      python-version: ${{ steps.get-python-version.outputs.version }}

    steps:
      - name: ⬇️ Checkout Code
        uses: actions/checkout@v4

      - name: 🐍 Extract Python Version from pyproject.toml
        id: get-python-version
        run: |
          python -c "
          import tomllib, re, sys, os
          try:
              with open('pyproject.toml', 'rb') as f:
                  data = tomllib.load(f)
              spec = data['project']['requires-python']
              match = re.search(r'[>=~=]\s*(\d+\.\d+)', spec)
              version = match.group(1) if match else None
              if not version:
                  raise ValueError(f'Could not extract Python version from: {spec}')
              print(f'📌 Python version: {version}')
              with open(os.environ['GITHUB_OUTPUT'], 'a') as fh:
                  print(f'version={version}', file=fh)
          except Exception as e:
              print(f'Error extracting Python version: {e}', file=sys.stderr)
              sys.exit(1)
          "

      - name: 🐍 Setup Python ${{ steps.get-python-version.outputs.version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ steps.get-python-version.outputs.version }}

      - name: 📦 Install uv
        uses: astral-sh/setup-uv@v5

      - name: 📦 Install nox (system-wide)
        run: uv pip install --system nox

      - name: 🧠 Cache uv cache
        uses: actions/cache@v4
        with:
          path: ~/.cache/uv
          key: uv-${{ runner.os }}-${{ steps.get-python-version.outputs.version }}-${{ hashFiles('pyproject.toml', 'uv.lock') }}
          restore-keys: |
            uv-${{ runner.os }}-${{ steps.get-python-version.outputs.version }}-

      - name: 🔍 Generate Nox Sessions JSON
        id: set-matrix
        run: |
          RAW_JSON=$(nox --json -l)
          echo "🔍 Raw Nox output: $RAW_JSON"

          SESSIONS=$(echo "$RAW_JSON" | jq -c '[.[].session]')
          echo "📦 Extracted sessions: $SESSIONS"

          if [ -z "$SESSIONS" ] || [ "$SESSIONS" == "[]" ]; then
            echo "❌ No Nox sessions detected. Exiting..." >&2
            exit 1
          fi

          echo "sessions=$SESSIONS" >> $GITHUB_OUTPUT

  run-nox-sessions:
    name: ✅ Run Nox session ${{ matrix.session }}
    needs: [generate-matrix]
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        session: ${{ fromJson(needs.generate-matrix.outputs.sessions) }}

    steps:
      - name: ⬇️ Checkout Code
        uses: actions/checkout@v4

      - name: 🐍 Setup Python ${{ needs.generate-matrix.outputs.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ needs.generate-matrix.outputs.python-version }}

      - name: 📦 Install uv
        uses: astral-sh/setup-uv@v5

      - name: 📦 Install nox (system-wide)
        run: uv pip install --system nox

      - name: 🧠 Restore uv cache
        uses: actions/cache@v4
        with:
          path: ~/.cache/uv
          key: uv-${{ runner.os }}-${{ needs.generate-matrix.outputs.python-version }}-${{ hashFiles('pyproject.toml', 'uv.lock') }}
          restore-keys: |
            uv-${{ runner.os }}-${{ needs.generate-matrix.outputs.python-version }}-

      - name: 🚀 Run Nox Session
        run: nox -s "${{ matrix.session }}"
        
  build-and-push-docker:
      name: 🚢 Build & Push Docker Image
      runs-on: ubuntu-latest
      if: github.event_name == 'push' && github.ref == 'refs/heads/main'
      needs: run-nox-sessions  # Wait for lint/tests via Nox to succeed
      permissions:
        contents: read
  
      steps:
        - name: ⬇️ Checkout Code
          uses: actions/checkout@v4
  
        - name: 🐳 Set up Docker Buildx
          uses: docker/setup-buildx-action@v3
  
        - name: 🏷️ Docker Metadata
          id: meta
          uses: docker/metadata-action@v5
          with:
            images: ${{ secrets.DOCKERHUB_USERNAME }}/terminus
            tags: |
              type=sha,format=short
              type=raw,value=latest
  
        - name: 🔑 Log in to Docker Hub
          uses: docker/login-action@v3
          with:
            username: ${{ secrets.DOCKERHUB_USERNAME }}
            password: ${{ secrets.DOCKERHUB_TOKEN }}
  
        - name: 🏗️ Build and Push Docker Image
          uses: docker/build-push-action@v6
          with:
            context: .
            push: true
            tags: ${{ steps.meta.outputs.tags }}
            labels: ${{ steps.meta.outputs.labels }}
            cache-from: type=gha
            cache-to: type=gha,mode=max
        


#############################################
# The simpler version of the CI/CD pipeline
# is commented out below. Uncomment it if you
# want to use it instead of the matrix-based
# approach.
# This version is less flexible and does not
# support multiple Python versions or sessions.
# It is suitable for simpler projects or
# workflows where you only need to run a single
# session with a specific Python version.
#############################################


# name: Terminus CI/CD

# on:
#   push:
#     branches: [main]
#     # trigger on tags for versioned releases
#     # tags: ['v*.*.*']
#   pull_request:
#     branches: [main]

# permissions:
#   contents: read

# env:
#   PYTHON_VERSION: '3.13'

# jobs:
#   lint-and-test:
#     name: Lint & Test
#     runs-on: ubuntu-latest
#     steps:
#       - name: ⬇️ Checkout Code
#         uses: actions/checkout@v4

#       - name: 🐍 Setup Python
#         uses: actions/setup-python@v5
#         with:
#           python-version: ${{ env.PYTHON_VERSION }}

#       - name: 📦 Install uv
#         uses: astral-sh/setup-uv@v5

#       - name: 🧠 Restore uv cache
#         id: cache-uv
#         uses: actions/cache@v4
#         with:
#           path: ~/.cache/uv
#           key: uv-${{ runner.os }}-${{ hashFiles('pyproject.toml', 'uv.lock') }}
#           restore-keys: |
#             uv-${{ runner.os }}-

#       - name: 📦 Install dependencies (lint)
#         run: uv sync --group lint

#       - name: ✨ Lint with Ruff
#         run: |
#           uv run ruff check src
#           uv run ruff format --check src
#     # No tests yet
#     #   - name: ✅ Run tests
#     #     run: uv run pytest tests/
#     #     continue-on-error: true  # Make strict if critical

#   build-and-push-docker:
#     name: Build & Push Docker Image
#     runs-on: ubuntu-latest
#     if: github.event_name == 'push' && github.ref == 'refs/heads/main'
#     needs: lint-and-test
#     permissions:
#       contents: read

#     steps:
#       - name: ⬇️ Checkout Code
#         uses: actions/checkout@v4

#       - name: 🐳 Set up Docker Buildx
#         uses: docker/setup-buildx-action@v3

#       - name: 🏷️ Docker Metadata
#         id: meta
#         uses: docker/metadata-action@v5
#         with:
#           images: ${{ secrets.DOCKERHUB_USERNAME }}/terminus
#           tags: |
#             type=sha,format=short
#             type=raw,value=latest

#       - name: 🔑 Log in to Docker Hub
#         uses: docker/login-action@v3
#         with:
#           username: ${{ secrets.DOCKERHUB_USERNAME }}
#           password: ${{ secrets.DOCKERHUB_TOKEN }}

#       - name: 🏗️ Build and Push Docker Image
#         uses: docker/build-push-action@v6
#         with:
#           context: .
#           push: true
#           tags: ${{ steps.meta.outputs.tags }}
#           labels: ${{ steps.meta.outputs.labels }}
#           cache-from: type=gha
#           cache-to: type=gha,mode=max

